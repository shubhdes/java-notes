micronaut - micro-service-1.0

What is micronaut?

-	Micronaut is framework used for developing microservices.

-	It works by using annotation processing at compile time.

-	It does not use reflection at runtime.

-	It provides faster start up time.

-	It does not require memory to save reflection caches.

-	It packages source code inside jar file.

-	It has an embedded web container called as netty.

-	It allows reactive programming.

How is dependency injection done in micronaut?

-	In micronaut dependency injection is done at compile time.

-	Micronaut support three ways of dependency injection called as setter, field and constructor.
	
-	We must use @Primary annotation or @Named annotation to resolve dependency injection ambiguity.

Enlist different class level annotations used in micronaut which corresponds to scope of micronaut bean?

-	@Controller

-	@Context annotation for eagerly initialized micronaut bean or @Singleton annotation for lazily initialized micronaut bean.

-	@Prototype or @Bean annotation which is the default scope of micronaut bean.

-	@Repository annotation for JPA repository or @JDBCRepository annotation for JDBC repository.

Enlist different controller method level annotations used in micronaut which corresponds to http method?

-	@Get

-	@Post

-	@Put

-	@Delete

Enlist different controller method parameter level annotations used in micronaut?

-	@PathVariable

-	@QueryValue

-	@Body

Enlist different method level annotations used in micronaut to manage micronaut bean lifecycle?

-	@PostConstruct

-	@PreDestroy

How to add configuration for a micronaut application?

-	To add configuration for a micronaut application we must use application.yaml file.

-	We must use the @Property annotation or @Value at field or parameter level to read configuration value.

-	Micronaut support active environment.

-	The active environment can be configured using MICRONAUT_ENVIRONMENTS variable.

-	The configuration using environment variable have more priority than the configuration using application-environment.yaml.

	ENVIRONMENT_VARIABLE > application-environment.yaml > application.yaml

How to perform exception handling in micronaut?

-	Exception handling in micronaut can be done locally or globally.

-	To handle exception inside controller we need to define method annotated with @Error annotation.

-	We can use this method to handle exception raised outside the controller.

-	This can be done by changing the global attribute which accept boolean parameter as true.

-	To provide exception handling globally we need to implement ExceptionHandler <E, R> interface.

-	We must override the following abstract method.

	public R handle(HttpRequest request, E exception)

How to implement a micronaut client?

-	A micronaut client allows reactive programming.

-	It can be implemented using two ways which are called as low-level client and declarative client. 

	Example:

	public MicronautClient(@Client("http://localhost:8080") RxHttpClient client) {;}

	Example:

	@Client("http://localhost:8080")
	public interface MicronautClient {

		@Get("/employees")
		public List<Employee> findAllEmployees();	
	}

How does micronaut client achieve resilience? 

-	A micronaut client achieve resilience using three ways called as retry, circuit-break and fallback.

-	Retry is implemented using @Retry annotation at method level or class level.

-	When the micronaut server is not available the micronaut client will continue calling it until required attempts.

-	The attempts attribute is used to define the number of retries allowed and delay attribute is used to define the time duration between attempts.

	Example:
	@Retryable(attempts = "3", delay = "2s")

-	Circuit-break design pattern is implemented using @CircuitBreak annotation at method level or class level.

-	Initially the circuit is in open state.

-	When the micronaut server is not available the micronaut client will continue calling it until required attempts.

-	Once the required attempts are exhausted the circuit is in closed state, any attempt to call micronaut server now will fail.

-	Again the circuit will reopen after required time duration.

-	The attempts attribute is used to define the number of retries allowed and delay attribute is used to define the time duration between attempts.

	Example:
	@CircuitBreak(attempts = "3", delay = "2s")

-	Fallback is implemented using @Fallback annotation at class level.

-	The fallback class must implement the declarative micronaut client interface.

-	It must override the client method with appropriate fallback action.

	Example:
	
	@Fallback
	public class MicronautClientImpl implement MicronautClient {
	
	}

Write a note on JDBC in micronaut?

-	JDBC in micronaut allows to map a java class with a database table.

-	In this way the fields inside a java class are mapped with columns inside database table.

-	This java class must be annotated with @MappedEntity annotation.

-	Following maven dependencies is required for JDBC.

    <dependency>
        <groupId>io.micronaut.data</groupId>
        <artifactId>micronaut-data-hibernate-jpa</artifactId>
    </dependency>

    <dependency>
        <groupId>io.micronaut.sql</groupId>
        <artifactId>micronaut-jdbc-hikari</artifactId>
    </dependency>

-	Following annotation processors are required JDBC.

	<path>
        <groupId>io.micronaut.data</groupId>
        <artifactId>micronaut-data-processor</artifactId>
        <version>${micronaut.data.version}</version>
	</path>

-	Datasource must be configured inside application.yaml file.

-	To create an repository we must declare an interface with @JdbcRepository annotation.

-	This interface must implement the CrudRepository<T, I> class.

Write a note on JPA in micronaut?

-	JPA in micronaut uses hibernate implementation.

-	Following maven dependencies is required for JPA.

    <dependency>
        <groupId>io.micronaut.sql</groupId>
        <artifactId>micronaut-data-hibernate-jpa</artifactId>
    </dependency>

    <dependency>
        <groupId>io.micronaut</groupId>
        <artifactId>micronaut-jdbc</artifactId>
    </dependency>

-	Following annotation processors are required JPA.

	<path>
        <groupId>io.micronaut.data</groupId>
        <artifactId>micronaut-data-processor</artifactId>
        <version>${micronaut.data.version}</version>
	</path>

-	Datasource must be configured inside application.yaml file.

-	To create an repository we must declare an interface with @Repository annotation.

-	This interface must implement the JpaRepository<T, I> class.