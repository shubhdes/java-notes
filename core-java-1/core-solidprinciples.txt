core java - solid principles

Enlist different SOLID design principles?

-	Below are different SOLID design principles,

	-	single responsibility
	
	-	open closed
	
	-	liskov substitution
	
	-	interface segregation
	
	-	dependency inversion

What is single responsibility design principle?

-	The single responsibility design principle says never be more than one reason for a class to change.

-	A class must provide very focused functionality or it must address specific concern of the desired functionality.

-	This allows changing the code in an organized manner.

Example:

class UserController {

	public void createUser(String userJSON) {
		...
		store.insert(userDTO);
		...
	}
	
	public void isUserValid(UserDTO user) {}
}

-	A controller class is responsibile to accept incoming request only. 

-	But in above example it accept incoming request, validate request body and insert user record in store.

-	Any changes to JSON schema and any change to persistent store will require change in UserController class.

-	An ideal solution is to move the code for validation in a separate class UserValidator and code for persistent store in a separate class UserService. 

Example:

class UserController {

	public void createUser(String userJSON) {}
}

class UserValidator {
	
	public void isUserValid(UserDTO user) {}
}

class UserService {
	
	public void save(UserDTO user) {}
}

What is open closed design principle?

-	The open closed design principle says software entities should be open for extension but closed for modifications.

-	The code must be open for enhancement but existing code must remain unchanged.

-	Using inheritance we must override the behavior of a parent class in its child class but should not change existing tested code of parent class.

Example:

class PhoneSubscriber {

	...
	double baseRate;
	long phone;
	...

	double calculateBill() {}
}

class ISPSubscriber {

	...
	double baseRate;
	long phone;
	...

	double calculateBill() {}
}

-	In above example both classes PhoneSubscriber and ISPSubscriber have common attributes. 

-	These attributes also will be required by any newly introduced class VOIPSubscriber.

-	These attributes can be moved to parent class Subscriber which cannot be changed later.

-	But the code to compute bill is different for both PhoneSubscriber and ISPSubscriber child classes.

-	This behavior must be overriden in both PhoneSubscriber and ISPSubscriber child classes.

Example:

abstract class Subscriber {

	...
	double baseRate;
	long phone;
	...

	abstract double calculateBill();
}

class PhoneSubscriber extends Subscriber {

	double calculateBill() {}
}

class ISPSubscriber extends Subscriber {

	double calculateBill() {}
}

What is liskov substitution design principle?

-	The liskov substitution design principle says we should be able to substitute parent class instance with child class instance.

-	This substitution must not change program's behavior.

Example:

class Rectangle {

	private float length;
	
	private float breadth;

	public Rectangle(float length, float breadth) {
		this.length = length;
		this.breadth = breadth;
	}
	
	public void setLength(float length) {
		this.length = length;
	}
	
	public void setBreadth(float breadth) {
		this.breadth = breadth;
	}
	
	public float getLength() {
		return this.length;
	}
	
	public float getBreadth() {
		return this.breadth;
	}
}

class Square extends Rectangle {

	public Square(float side) {
		super(side, side);
	}
	
	public void setLength(float length) {
		setSide(length);
	}
	
	public void setBreadth(float breadth) {
		setSide(breadth);
	}
	
	public void setSide(float side) {
		super.setLength(side);
		super.setBreadth(side);
	}
}

class Client {
	
	public static void main(String[] args) {
		Square square = new Square(10);
		useRectangle(square);
	}
	
	public static void useRectangle(Rectangle rectangle) {
		rectangle.setLength(15);
		rectangle.setBreadth(20);
		assertEquals(15, rectangle.getLength());
	}
}

-	In the above example child class Square instance used as an substitute for parent class Rectangle instance.

-	But this causes change in the length of rectangle when breadth is altered and change in breadth of rectangle when length is altered.

-	This happens because the behavior of parent class Rectangle is overriden in child class Square.

-	This is violation of liskov substitution principle. This can be fixed by eliminating the parent child relationship between both classes.

Example:

interface Shape {

	float computeArea();
}

class Rectangle implements Shape {

	private float length;
	
	private float breadth;

	public Rectangle(float length, float breadth) {
		this.length = length;
		this.breadth = breadth;
	}
	
	public void setLength(float length) {
		this.length = length;
	}
	
	public void setBreadth(float breadth) {
		this.breadth = breadth;
	}
	
	public float getLength() {
		return this.length;
	}
	
	public float getBreadth() {
		return this.breadth;
	}

	public float computeArea() {
		return length * breadth;
	}
}

class Shape implements Shape {

	private float side;

	public Square(float side) {
		super(side, side);
	}
	
	public void setSide(float side) {
		this.side = side;
	}
	
	public float computeArea() {
		return side * side;
	}
}

What is interface segregation design principle?

-	The interface segregation design principle says client code must not be forced to depend on methods which they don't use.

-	It says we must not include unrelated methods inside single interface and cause interface pollution.

-	Because of interface pollution many implementation methods in child class have empty body, throw UnsupportedOperationException or return null.

Example:

interface PersistenceService<T> {

	void save(T entity);
	
	void update(T entity);
	
	void delete(T entity);
	
	T findById(long id);
	
	T findByName(String name);
}


class UserService implements PersistenceService<User> {

	void save(User entity) {...}
	
	...
	
	User findByName(String name) {...}
}

class OrderService implements PersistenceService<User> {

	void save(Order entity) {...}
	
	...
	
	Order findByName(String name) { throw new UnsupportedOperationException("Method findByName is not allowed for class Order");}
}

-	In the above example a user can be queried by name but an order cannot.

-	However both classes UserService and OrderService implement the PersistenceService interface and need to override all abstract methods inherited.

-	An ideal solution is to move findById from PersistenceService to UserService or to break PersistenceService interface into multiple interfaces.

What is dependency inversion design principle?

-	The dependency inversion design principle says high level module should not depend on low level module but both should depend on abstraction. Abstraction should not depend on details but details should depend on abstraction.

Example:

class MessagePrinter {


	public void writeMessage(Message message, String file) {
		...
		Formatter formatter = new JSONFormatter();
		...
		PrintWriter writer = new PrintWriter();
		...
	}
}

-	The above code is tightly coupled with two implementations JSONFormatter and PrintWriter.

-	To change the message format or message destination we need to change the code everytime.

-	To fix this we will use abstraction and allow client code to instantiate the dependency.

Example:

class MessagePrinter {

	public void writeMessage(Message message, String file, Formatter formatter, Writer writer) {
		...
	}
}