core java - design patterns

What is a design pattern?

-	A design pattern is a solution to recurring problem in a context.

Explain design pattern hierarchy?

-														catalog
														   |
						 ---------------------------------------------------------------------
						 |																	 |
						GOF																	JEE
						 |
		-----------------------------------
		|				 |				  |
	creational		structural		behavioral
	
Explain the singleton design pattern?

-	The singleton design pattern is a creational design pattern.

-	It allows only one object creation for a class.

-	This object will be used across the entire application.

syntax:
	
	class <classname> {
	
		private static <classname> instance;
	
		private <classname>() {}
		
		public static <classname> getInstance() {}
	
	}

example:

	class DateUtil {
	
		private static DateUtil instance;
	
		private DateUtil() {}
	
		private static DateUtil getInstance() {
			//
			if(null == instance) {
				instance = new DateUtil();
			}
			return instance; 
		}
	}

-	In the above example object will be created only when the method is called. This is called lazy instantiation.

-	Lazy instantiation must be adopted when we are not sure that the object is required in the application.

Explain eager instantiation in singleton design pattern?

-	We can create the object even before the method is called. This is called eager instantiation.

syntax:
	
	class <classname> {
	
		private static <classname> instance = new <classname>;
	...}
	
	class <classname> {
	
		private static <classname> instance;
		
		static {
			instance = new <classname>;
		}
	...}
	
example:

	class DateUtil {
	
		private static DateUtil instance = new DateUtil();
		
		...
	
		private static DateUtil getInstance() {
			return instance;
		}
	}		
	
-	Eager instantiation must be adopted when we are sure that the object is required atleast once in the application.

How to make singleton design pattern thread safe?

-	We can make singleton design pattern thread safe using synchronization and volatile.

-	This will prevent multiple objects created in different threads.

syntax:
	
	class <classname> {
	
		private static volatile <classname> instance;
	
		private <classname>() {}
		
		public static synchronized <classname> getInstance() {}
	
	}
	
example:

	class DateUtil {
	
		private static volatile DateUtil instance;
	
		private DateUtil() {}
	
		private static synchronized DateUtil getInstance() {
			//
			if(null == instance) {
				instance = new DateUtil();
			}
			return instance; 
		}
	}
	
example:

	class DateUtil {
	
		private static volatile DateUtil instance;
	
		private DateUtil() {}
	
		private static DateUtil getInstance() {
			//
			if(null == instance) {
				
				synchronized(DateUtil.class) {
					
					if(null == instance) {
						instance = new DateUtil();
					}
				}
			}
			return instance; 
		}
	}
		