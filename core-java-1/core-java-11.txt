core java - java 11 features

What is openjdk?

-	The openjdk is a free version of java available from java 11 onwards.

Explain how to run a java program?

-	Till java 10 version we need to compile the java program and then execute it.

-	We use javac command with file name to compile the java program and java command with class name to execute it.

	Example:
	
	# javac Myprogram.java
	# java Myprogram

-	From java 11 version onwards we can execute java program directly without compilation by using java command with file name.

	Example:
	
	# java Myprogram.java
	
-	The single java command does both compilation and execution.

-	However with backward compatibility, we can use javac command with file name to compile the java program and java command with class name to execute it.

-	From java 11 version onwards we can define a public class inside a java file with name different from the java file name.

-	There is a possibility of multiple classes with main method exists inside single java file.

-	Then upon execution jvm will search for main method inside each class defined from top to bottom inside the java file.

-	Then jvm executes the main method of first found class with main method inside it. 

	Example:
	
	Myprogram.java
	
	class A {
	
	}
	
	class B {
	
		public static void main(String[] args) {
			
			System.out.println("Inside main method of class B");
		}
	}
	
	public class C {
	
		public static void main(String[] args) {
			
			System.out.println("Inside main method of class C");
		}
	}
	
	class D {
	
		public static void main(String[] args) {
			
			System.out.println("Inside main method of class D");
		}
	}
	
	# java Myprogram.java
	
	Inside main method of class B
	
Explain the utility methods inside String class?

-	Below are different utility methods inside String class.

-	public String repeat(int count)

-	This method returns a result string object after repeated concatenation for count number of times of the input string object.

	Example:
	
	String input = "durga";
	
	input.repeat(5);	//durgadurgadurgadurgadurga

-	When the count parameter is zero then this method returns empty string object.

-	When the count parameter is negative then we will get runtime exception saying IllegalArguementException.

-	public boolean isBlank()

-	This method returns true when input string object is empty or has only white spaces otherwise returns false. 

-	Another method public boolean isEmpty() was introduced in java version 6.

-	It returns true if the input string object length is zero otherwise it enters false.

-	However input string object has only white spaces then this method will return false.

	Example:
	
	String input = "    ";
	
	input.isBlank();	//true

	input.isEmpty();	//false

-	public String strip()

-	This method returns a result string object after removing white spaces at both beginning and end of the input string object.

-	public String stripLeading()

-	This method returns a result string object after removing white spaces at beginning of the input string object.

-	public String stripTrailing()

-	This method returns a result string object after removing white spaces at end of the input string object.

-	public Stream lines()

-	This method returns a stream of string objects extracted from the input string object separated by line terminator character.

	Example:
	
	String input = "durga\nsoftware\nsolutions";
	
	Stream<String> streamOfLines = input.lines();
	
Explain use of var keyword in lambda expression parameters?

-	From java 11 version onwards we can declare the parameters of lambda expression using var keyword.

	Example:
	
	Calculator calObj = (var fval, var sval) -> fval + sval;
	
-	When any one parameter is declared with var keyword then remaining all parameters must be also declared with var keyword otherwise we will get compilation error.

-	Also when the lambda expression has only one parameter then inorder to use var keyword the parameter must be enclosed inside round brackets otherwise we will get compilation error.

Explain nested based access control?

-	In java every outer class can access the private members of nested inner class.

	Example:
	
	class MyProgram {
	
		class MyNestedProgram {
		
			private int count = 10;
		}
		
		public static void main(String[] args) {
			
			MyProgram.MyNestedProgram nestObj = new MyProgram().new MyNestedProgram();
			
			System.out.println(nestObj.count);	//	10
			
			nestObj.count = 50;
			
			System.out.println(nestObj.count);	//	50
			
			Field countFld = MyNestedProgram.class.getDeclaredField("count");
		}
	}

-	However when the outer class tries to access private members of nested inner class using reflection we get runtime saying IllegalAccessException.

	Example:
	
	class MyProgram {
	
		class MyNestedProgram {
		
			private int count = 10;
		}
		
		public static void main(String[] args) {
			
			MyProgram.MyNestedProgram nestObj = new MyProgram().new MyNestedProgram();
			
			Field countFld = MyNestedProgram.class.getDeclaredField("count");
			
			System.out.println(countFld.get(nestObj));	//	we get runtime saying IllegalAccessException
			
			countFld.setInt(nestObj, 50);
			
			System.out.println(countFld.get(nestObj));	//	we get runtime saying IllegalAccessException.
		}
	}
	
-	From java 11 onwards few additional methods are added to reflection package to support handling metadata of nested inner classes.

-	Hence the above code executes without any runtime exception while using java 11.

Explain reading writing string to and from files?

-	Below are different methods inside java.nio.file.Files class to allow writing string to and from files.

-	public static Path writeString(Path path, CharSequence charSeq, OptionOption... options) throws IOException

-	public static Path writeString(Path path, CharSequence charSeq, CharSet charSet, OptionOption... options) throws IOException

-	The above two methods allow writing string object inside a file. 

-	The options parameter determine whether the existing file content must be overriden or new content must be appended to it.

-	public static String readString(Path path) throws IOException

-	public static Path writeString(Path path, CharSet charSet) throws IOException

-	The above two methods allow reading the file contents as string object. 
