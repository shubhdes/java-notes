core java - design patterns

Explain and enlist structural design pattern?

-	The structural design pattern deal with how classes and objects are arranged or composed.

-	It uses combination of inheritance and composition.

-	Below are different types of structural design patterns,

	-	adapter
	
	-	bridge
	
	-	decorator
	
	-	composite
	
	-	facade
	
	-	flyweight
	
	-	proxy

Explain the adapter design pattern?

-	The adapter design pattern is a structural design pattern.

-	An existing instance (BusinessCardDesigner) provides functionality required, but it expects instance to be of another interface type (Customer).

-	Using adapter design pattern the existing instance (Employee) can work with existing code (BusinessCardDesigner) by adapting the instance to expected interface type (Customer).

-	It is also called as wrapper.

-	There are two varities of adapter design pattern, they are class adapter and object adapter.

Write a note on implementing adapter design pattern?

-	Implementing adapter class as child class of the target interface (Customer).

-	For class adapter, the adapter class must extend the adaptee class.

-	From the adapter class call inherited method of adaptee class. A class adapter design pattern is also called as two way adapter.

-	For object adapter, the adapter class must compose of adaptee class instance (Employee).

-	From the adapter class call method of adaptee class.

-	We must accept the adaptee instance as constructor arguement for adapter class.

								<<concrete class>>        <<interface>> 
	  Client					BusinessCardDesigner	  Customer	<<target>>							
	  ---------------			---------------		 	  -------------            					
	  | 		    |---------->|		      |---------->| 		  |            
	  ---------------			---------------		  	  -------------
																^     
														       ---			
														        .   
														        .   
								-------------		  	------------- 
								|			|--------<*>| 		  	| EmployeeObjectAdapter <<concrete class>> 
								-------------		  	------------- <<adpater>>
								Employee <<concrete class>> 
                                <<adaptee>>                          
								
Example:

public class BusinessCardDesigner {

	public String designCard(Customer customer) {
		return customer.getName() + " works as " + customer.getDesignation() + " at " + customer.getAddress();
	}
}

public interface Customer {

	String getName();

	String getDesignation();

	String getAddress();
}

public class Employee {

	private String fullName;

	private String jobTitle;

	private String officeLocation;

	public String getFullName() {
		return fullName;
	}

	public void setFullName(String fullName) {
		this.fullName = fullName;
	}

	public String getJobTitle() {
		return jobTitle;
	}

	public void setJobTitle(String jobTitle) {
		this.jobTitle = jobTitle;
	}

	public String getOfficeLocation() {
		return officeLocation;
	}

	public void setOfficeLocation(String officeLocation) {
		this.officeLocation = officeLocation;
	}
}

public class EmployeeObjectAdapter implements Customer {

	private Employee adaptee;

	public EmployeeObjectAdapter(Employee adaptee) {
		this.adaptee = adaptee;
	}

	@Override
	public String getName() {
		return adaptee.getFullName();
	}

	@Override
	public String getDesignation() {
		return adaptee.getJobTitle();
	}

	@Override
	public String getAddress() {
		return adaptee.getOfficeLocation();
	}
}

public class Client {

	public static void main(String[] args) {
		Employee emp = new Employee();
		emp.setFullName("Java Hub");
		emp.setJobTitle("Software Developer");
		emp.setOfficeLocation("India");
		Customer customer = new EmployeeObjectAdapter(emp);
		BusinessCardDesigner businessCardDesigner = new BusinessCardDesigner();
		String card = businessCardDesigner.designCard(customer);
		System.out.println(card);
	}
}

Write a note on design consideration for adapter design pattern?

-	Avoid logic inside adapter class and simply delegate to adaptee class.

-	With class adapter the adapter may override the method inherited from adaptee. This may cause adaptee and adapter to behave differently.

-	A class adapter is not possible if both target and adaptee are concrete classes.

-	In class adapter the adapter instance can behave like both target and adaptee. The adapter class will be polluted with unrelated inherited methods.

-	With object adapter we can change the composed adaptee instance from one implementation to another.

Write a note on pitfalls of adapter design pattern?

-	In class adapter the adapter class will be polluted with unrelated inherited methods.

-	The amount of logic inside adapter class depends on how much similar the target interface and adaptee class is.

Explain the bridge design pattern?

-	The bridge design pattern is a structural design pattern.

-	The abstraction (used by client) and implementation are tightly coupled in inheritance but using bridge design pattern we can decouple it.

-	It creates two separate inheritance hierarchies one for abstraction and another for implementation.

-	These two hierarchies are connected (bridge) using composition.

-	The abstraction here doesn't mean abstract class or interface but it is used by client code to hide complexity.

Write a note on implementing bridge design pattern?

-	Implementing abstraction and implementation hierarchies.

-	Abstraction is composed of concrete implementation instance.

-	We must accept the implementation instance as constructor arguement for abstraction class.

								<<abstraction hierarchy>> <<implementation hierarchy>>

								<<interface>>        	  <<interface>>
	  Client					FifoCollection	 	 	  LinkedList								
	  ---------------			---------------		 	  -------------            					
	  | 		    |---------->|		      |     ------| 		  |            
	  ---------------			---------------		|  	  -------------
									  ^				|			^     
									 ---			|		   ---			
							  		  .				|	        .   
									  .				|	        .   
								-------------		|	  ------------- 
	   Queue <<concrete class>> |			|<*>-----	  | 		  | SinglyLinkedList <<concrete class>>
								-------------	  		  ------------- 

Example:

public interface FifoCollection<T> {

	void offer(T t);

	T poll();
}

public class Queue<T> implements FifoCollection<T> {

	private LinkedList<T> list;

	public Queue(LinkedList<T> list) {
		this.list = list;
	}

	@Override
	public void offer(T t) {
		list.addLast(t);
	}

	@Override
	public T poll() {
		return list.removeFirst();
	}
}

public interface LinkedList<T> {

	void addFirst(T t);

	T removeFirst();

	void addLast(T t);

	T removeLast(T t);
}

public class SinglyLinkedList<T> implements LinkedList<T> {

	private class Node {
		T data;
		Node next;

		private Node(T data, Node next) {
			this.data = data;
			this.next = next;
		}
	}

	private Node top;
	private Node last;
	private int size;

	@Override
	public void addFirst(T t) {
		Node temp = new Node(t, null);
		if (size == 0) {
			top = temp;
			last = temp;
		} else {
			temp.next = top;
			top = temp;
		}
		size++;
	}

	@Override
	public T removeFirst() {
		if (size == 0) {
			return null;
		}
		Node temp = top;
		if (size == 1) {
			top = null;
			last = null;
		} else {
			top = temp.next;
		}
		size--;
		return temp.data;
	}

	@Override
	public void addLast(T t) {
		Node temp = new Node(t, null);
		if (size == 0) {
			top = temp;
			last = temp;
		} else {
			last.next = temp;
			last = temp;
		}
		size++;
	}

	@Override
	public T removeLast(T t) {
		if (size == 0) {
			return null;
		}
		Node temp = last;
		if (size == 1) {
			top = null;
			last = null;
		} else {
			Node i = top;
			while (i.next != last) {
				i = i.next;
			}
			last = i;
			last.next = null;
		}
		size--;
		return temp.data;
	}
}

public class Client {

	public static void main(String[] args) {

		FifoCollection<Integer> collection = new Queue<>(new SinglyLinkedList<>());
		collection.offer(10);
		collection.offer(20);
		collection.offer(30);

		System.out.println(collection.poll());
		System.out.println(collection.poll());
		System.out.println(collection.poll());
	}
}

Write a note on design consideration for bridge design pattern?

-	Abstraction might be a concrete class and not abstract class or interface.

-	Both abstraction and implementation can be changed independent of each other.

What is difference between bridge and adapter design pattern?

-	The bridge design pattern allows the abstraction and implementation to vary independently.

-	It needs to be designed from beginning.

-	The adapter design pattern allows unrelated classes to work togther.

-	It is used when a legacy code is to be integrated with new code.

Write a note on pitfalls of bridge design pattern?

-	Complex to understand and implement.

-	It needs to be designed from beginning and adding it to legacy code is difficult.

Explain the decorator design pattern?

-	The decorator design pattern is a structural design pattern.

-	It is used to enhance functionality of an existing instance dynamically.

-	It wraps an instance within itself and provides same interface as the wrapped instance.

-	It provides an alternative to child class of an existing concrete class.

-	A decorator instance can compose of an instance of concrete implementation or another decorator (recursive composition) also.

Write a note on implementing decorator design pattern?

-	Implementing concrete class and decorator class which extends the interface.

-	A decorator can be abstract and have child class implementations for varieties of enhancements.

-	We must accept the implementation instance or another decorator instance as constructor arguement for decorator class.

										<<interface>>
			  Client				    Message				
			  ---------------		    -------------            				
	          | 		    |---------->|			|------------|
	          ---------------		    -------------			 |
                                 		  ^       ^   			 |			
                                		 ---	 ---			 |	
                                 		  .       .				 |
                                  		  .       .				 |
                                 -------------	-------------	 |
                                 |  		 |  |			|<*>--
                                 -------------  -------------
                                 TextMsg        Base64EncodedMsg       <<concrete classes>>
Example:

public interface Message {

	String getContent();
}

public class TextMessage implements Message {

	private String content;

	public TextMessage(String content) {
		this.content = content;
	}

	@Override
	public String getContent() {
		return content;
	}
}

public class Base64EncodedMessage implements Message {

	private Message message;

	public Base64EncodedMessage(Message message) {
		this.message = message;
	}

	@Override
	public String getContent() {
		byte[] content = message.getContent().getBytes();
		return Base64.getEncoder().encodeToString(content);
	}
}

public class Client {

	public static void main(String[] args) {
		Message message = new TextMessage("welcome");
		Message decorator = new Base64EncodedMessage(message);
		System.out.println(decorator.getContent());
	}
}

Write a note on design consideration for decorator design pattern?

-	A large state in base class will inherit it to decorator class where it may be of no use.

-	A decision needs to be made whether a decorated instance is equal (equals and hashcode) to another instance without decorator.

-	A recursive composition may cause too many instances for minor enhancements.

-	With decorators we can dynamically compose the behavior at runtime.

-	A decorator must do only minor enhancement and not change the complete behavior.

Write a note on pitfalls of decorator design pattern?

-	A recursive composition may cause too many instances for minor enhancements.

-	It is not a replacement to inheritance, it is to do only minor enhancement and not change the complete behavior.

Explain the composite design pattern?

-	The composite design pattern is a structural design pattern.

-	It is used when there is a part-whole or parent-child relationship between instances.

-	It is used to treat a hierarchy (tree) of instances (both leaf and composite) uniformly.

-	It is enhancement to object oriented programming's composition.

Write a note on implementing composite design pattern?

-	Implementing leaf class and composite class which extends the interface.

-	Implementing in a way that algorithm should work irrespective of instance being of type leaf or composite.

-	The leaf class may need to provide implementation for children management methods which it doesn't support. 

-	The composite instance will delegate the responsibility to leaf instance.

										<<abstract class>>
			  Client				    File				
			  ---------------		    -------------            				
	          | 		    |---------->|			|------------|
	          ---------------		    -------------			 |
                                 		  ^       ^   			 |			
                                		 ---	 ---			 |	
                                 		  .       .				 |
                                  		  .       .				 |
                                -------------	-------------	 |
                                |  		    |  	|			|<>---
                                -------------   -------------
                                BinaryFile      Directory       <<concrete classes>>

Example:

public abstract class File {

	private String name;

	public File(String name) {
		this.name = name;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public abstract void ls();

	public abstract void addFile(File file);

	public abstract File[] getFiles();

	public abstract boolean removeFile(File file);
}

public class BinaryFile extends File {

	private long size;

	public BinaryFile(String name, long size) {
		super(name);
		this.size = size;
	}

	@Override
	public void ls() {
		System.out.println("Name=" + getName() + " Size=" + size);
	}

	@Override
	public void addFile(File file) {
		throw new UnsupportedOperationException("Leaf node doesn't support add operation");
	}

	@Override
	public File[] getFiles() {
		throw new UnsupportedOperationException("Leaf node doesn't support add operation");
	}

	@Override
	public boolean removeFile(File file) {
		throw new UnsupportedOperationException("Leaf node doesn't support add operation");
	}
}

public class Directory extends File {

	private List<File> children = new ArrayList<>();

	public Directory(String name) {
		super(name);
	}

	@Override
	public void ls() {
		System.out.println("Name=" + getName() + " Size=" + children.size());
		for (File child : children) {
			child.ls();
		}
	}

	@Override
	public void addFile(File file) {
		children.add(file);
	}

	@Override
	public File[] getFiles() {
		return children.toArray(new File[children.size()]);
	}

	@Override
	public boolean removeFile(File file) {
		return children.remove(file);
	}
}

public class Client {

	public static void main(String[] args) {
		File root = new Directory("javahub");
		File dir = new Directory("structural");
		dir.addFile(new BinaryFile("adpater", 0));
		dir.addFile(new BinaryFile("bridge", 0));
		dir.addFile(new BinaryFile("decorator", 0));
		dir.addFile(new BinaryFile("composite", 0));
		root.addFile(dir);
		root.ls();
	}
}

Write a note on design consideration for composite design pattern?

-	It is recommended to provide method to access the root of instance tree.

-	It is possible to maintain children collection inside parent abstract class.

-	Frequently used instances from tree may be cached.

-	Decision needs to be made where the children management methods must be declared.

-	The client code must be able to use abstract layer without any need to distinguish between leaf and composite instances.

Write a note on pitfalls of composite design pattern?

-	Multiple type of leaf added to tree might need client code to do runtime check if an operation is supported by leaf instance or not.

-	Building instance tree is complex.

-	Too many instances and using cache is complex.

Explain the facade design pattern?

-	The facade design pattern is a structural design pattern.

-	It is used when client code needs to interact with large number of interfaces and classes (subsystem). The client code is tightly coupled with them.

-	The facade design pattern provide a simple and unified interface to the subsystem.

-	It is not a one to one method forwarding to other classes.

Write a note on implementing facade design pattern?

-	Implementing facade class and include methods considering overall usecase of the subsystem by client code.

						   <<concrete class>> 		
	Client			       EmailFacade				<<subsystem>>
	-------------		   --------------           -------------		
	|			|--------->|			|---------->|			|
    -------------		   --------------           -------------

Example:

public class Order {

	private String id;

	private double total;

	public Order(String id, double total) {
		this.id = id;
		this.total = total;
	}

	public String getId() {
		return id;
	}

	public void setId(String id) {
		this.id = id;
	}

	public double getTotal() {
		return total;
	}

	public void setTotal(double total) {
		this.total = total;
	}
}

public class EmailFacade {

	public boolean sendOrderEmail(Order order) {
		Template template = TemplateFactory.createTemplateFor(TemplateType.Email);
		Stationary stationary = StationaryFactory.createStationary();
		Email email = Email.getBuilder().withTemplate(template).withStationary(stationary).forObject(order).build();
		Mailer mailer = Mailer.getMailer();
		return mailer.send(email);
	}
}

public class Client {

	public static void main(String[] args) {
		EmailFacade facade = new EmailFacade();
		facade.sendOrderEmail(new Order("ORD1001", 7501.35d));
	}
}

Write a note on design consideration for facade design pattern?

-	The facade should minimize the complexity of subsystem and provide usable interface.

-	We can use an interface for facade and client code can use different facade implementations to interact with different subsystem implementations.

-	The subsystem classes must still remain usable by client code whenever required.

-	It must simplify and weaken the coupling between two subsystems.

-	When the requirement is to weaken the coupling between client code and subsystem and not to simplify the interaction we must use abstract factory design pattern.

Write a note on pitfalls of facade design pattern?

-	Needing a facade pattern indicates subsystem designed is too complex.

-	Most commonly misued as a container of related methods.

Explain the flyweight design pattern?

-	The flyweight design pattern is a structural design pattern.

-	It is used when a large number of instances of a class are required but maintaining these instances are performance concern.

-	It allows us to cache and share an instance in multiple context.

-	An instance state is divided into two parts they are instrinsic state and extrinsic state.

-	An instrinsic state of an instance doesn't change but its extrinsic state may change.

-	The extrinsic state is provided by client code.

-	It uses simple factory to avoid client code from knowing the complexity of instance creation and sharing.

Write a note on implementing flyweight design pattern?

-	Identifying the instrinsic and extrinsic state of an instance.

-	Implementing an interface with method which accept extrinsic state from client code.

-	Implementing flyweight factory.

							<<concrete classes>>	  <<interface>>
	Client					ErrorMessageFactory		  ErrorMessage			
	-------------			---------------			  -------------            					
	|			|---------->|			  |<>---------|			  |            
	-------------			---------------			  -------------
															^   
							---------------				   ---		
							|			  |					.
							---------------					.
							<<enum>>				  -------------
							ErrorType				  |		      |
													  -------------
													  <<concrete class>>
													  SystemErrorMessage
Example:

public interface ErrorMessage {

	String getText(String errorCode);
}

public class SystemErrorMessage implements ErrorMessage {

	private String messageTemplate;

	private String helpBaseUrl;

	public SystemErrorMessage(String messageTemplate, String helpBaseUrl) {
		this.messageTemplate = messageTemplate;
		this.helpBaseUrl = helpBaseUrl;
	}

	@Override
	public String getText(String errorCode) {
		return messageTemplate.replace("$errorCode", errorCode) + helpBaseUrl + errorCode;
	}
}

public class ErrorMessageFactory {

	public enum ErrorType {
		GenericSystemError, PageNotFoundError, ServerError
	}

	private static Map<ErrorType, SystemErrorMessage> errorsMessages = new HashMap<>();

	static {
		errorsMessages.put(ErrorType.GenericSystemError, new SystemErrorMessage(
				"A generic error of type $errorCode occured, please refer ", "http://somedomain.com?errorCode="));
		errorsMessages.put(ErrorType.PageNotFoundError, new SystemErrorMessage(
				"Page not found error of type $errorCode occured, please refer ", "http://somedomain.com?errorCode="));
		errorsMessages.put(ErrorType.ServerError,
				new SystemErrorMessage("An internal server error of type $errorCode occured, please refer ",
						"http://somedomain.com?errorCode="));
	}

	public static ErrorMessage getError(ErrorType errorType) {
		return errorsMessages.get(errorType);
	}
}

public class Client {

	public static void main(String[] args) {
		ErrorMessage errorMessage = ErrorMessageFactory.getError(ErrorType.GenericSystemError);
		System.out.println(errorMessage.getText("E231001"));
	}
}

Write a note on design consideration for flyweight design pattern?

-	A factory is necessary to hide the complexity of instance creation and sharing.

-	The instrinsic state must be immutable.

-	The extrinsic state must be moved out of the class and provided by client.

Write a note on pitfalls of flyweight design pattern?

-	The client code needs to maintain or compute the extrinsic state everytime. This will affect the performance.

-	It is difficult to find a perfect candidate for flyweight.

Explain the proxy design pattern?

-	The proxy design pattern is a structural design pattern.

-	It is used when we need a surrogate to another instance.

-	The client code is unaware of the surrogate instance.

-	The surrogate implementation will delegate the responsibility to concrete class instance.

-	But concrete class instance may be created immediately or delayed and created on demand.

-	It is used for access control, remote access or delay instance creation unless absolutely necessary.

Write a note on implementing proxy design pattern?

-	Implementing proxy class and concrete class which extends the interface.

-	The proxy can accept concrete class instance as constructor arguement or create it later.

-	It uses simple factory to avoid client code from knowing about surrogate instance.

-	A dynamic proxy allows to provide surrogate implementation at runtime.

													  <<interface>>
	Client					ImageFactory		  	  Image				
	-------------			---------------		      -------------            				
	|			|---------->| 		      |---------->|			  |------------|
	-------------			---------------		      -------------			   |
														^       ^   		   |			
													   ---     ---			   |	
														.       .			   |
														.       .			   |
											  -------------	  -------------	   |
											  |   		  |   | 		  |<*>--
                                              -------------   -------------
											  BitmapImage     ImageProxy       <<concrete classes>>

Example:

public interface Image {

	void setLocation(Point2D location);

	Point2D getLocation();

	void render();
}

public class BitmapImage implements Image {

	private String name;

	private Point2D location;

	public BitmapImage(String name) {
		this.name = name;
		// code to load image from harddisk by doing io operation
	}

	@Override
	public void setLocation(Point2D location) {
		this.location = location;
	}

	@Override
	public Point2D getLocation() {
		return location;
	}

	@Override
	public void render() {
		System.out.println("Rendering image = " + name);
	}
}

public class ImageProxy implements Image {

	private String name;

	private Point2D location;

	private Image image;

	public ImageProxy(String name) {
		this.name = name;
	}

	@Override
	public void setLocation(Point2D location) {
		this.location = location;
	}

	@Override
	public Point2D getLocation() {
		return location;
	}

	@Override
	public void render() {
		if (image == null) {
			image = new BitmapImage(name);
			image.setLocation(location);
		}
		image.render();
	}
}

public class ImageFactory {

	public static Image getImage(String name) {
		return new ImageProxy(name);
	}
}

public class Client {

	public static void main(String[] args) {
		Image image = ImageFactory.getImage("javahub.bmp");
		image.setLocation(new Point2D(10, 10));
		image.render();
	}
}

Write a note on design consideration for proxy design pattern?

-	The concrete class instance may be created as soon as surrogate instance is created or created later on demand.

-	The surrogate instance may also maintain some state on behalf of concrete class instance.

-	We must consider performance cost of proxy instance especially when it is implemented as synchronized.

-	All proxies may not use concrete class object instead it may call remote service.

Write a note on pitfalls of proxy design pattern?

-	The dynamic proxy needs concrete class to implement atleast one interface.

-	Multiple surrogate instance on one concrete class instance may be difficult to manage.

-	The static proxy design pattern is quiet similar to adapter and decorator design pattern and might be confusing.