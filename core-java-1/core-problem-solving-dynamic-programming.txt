core java - problem solving using dynamic programming

What is dynamic programming?

-	Recursion is breaking the main problem into subproblems and compute solution for each.

-	Then use the computed solution of each subproblem to compute the solution of main problem.

-	Consider an example of recursive way to compute whether a string is palindrome or not.

-	At each step the character at first index and last index of substring is compared.

-	Then the computed result is use to determine whether the algorithm execution must continue or not.

-	Such problems are called as optimal substructures.

-	Dynamic programming is an optimisation over recursion.

-	It is used to solve optimal substructures and overlapping subproblems.

-	In overlapping subproblems we reuse the computed solution of a subproblem to compute solution of another similar overlapping subproblem.

-	Consider an example of recursive way to compute fibonacci series.

-	The recursive method is called using the same parameter multiple times.

-	With dynamic programming we can save the result inside a datastructure.

-	When the recursive method is called using the same parameter we will reuse the result from the datastructure instead recomputing it.

-	There are two ways to implement dynamic programming called as memoisation or top down and tabulation or bottom up.
