core java - streams

Why should we use stream?

-	In java stream allows to use declarative programming instead of imperative programming.

-	The implementation of stream operation is managed by programming language and must not be taken care by developer.

-	This will ensures that code is concise.

How is stream is different from collection?

-	The purpose of collection is to store elements. 

-	But the purpose of stream is to process elements.

-	Any operation on stream do not modify the collection.

-	The stream operations are lazy in nature.

-	Elements of stream can be consumed only once.

-	A stream can produce infinite number of elements i.e stream is unbounded.

How to create stream?

-	To create stream from array we need to use method of from Stream interface.

	Example:
	
	Stream strm = Stream.of(10, 20, 30, 40, 50);

-	To create stream from collection we need to use method with name stream from Collection interface.

	Example:
	
	Stream strm = lst.stream();

What is an unbounded stream?

-	A stream which can produce infinite number of elements is called unbounded stream.

-	There are two ways to produce infinite stream.

-	First way is to use generate method which accept supplier object as an input arguement. 

	Syntax:
	
	public Stream generate(Supplier sup)

	Example:

	Stream.generate(Math::random).forEach(System.out::println);

-	Next way is to use iterate method which accept initial seed or value and UnaryOperator.

-	It will produce infinite elements by calling unary operator first time using the initial seed value to produce new seed.

-	Then new seed value is passed as arguement to unary operator everytime.

	Syntax:
	
	public Stream iterate(T seed, UnaryOperator uop)

	Example:

	Stream.iterate(10, num1 -> num1 + 10).forEach(System.out::println);

What are stream operations?

-	There are two types of stream operations they are called as intermediate and terminal operations.

-	Intermediate operations exist between the source or stream and the terminal operation.

-	They result into new stream.

-	These operations are lazy in nature.

-	Intermediate operation can further divided into stateless and statefull operations.

-	In stateless operations the processing of each element is independent of another.

-	Filtering and mapping are examples of stateless operations.

-	But in statefull operations processing of each element is dependent on another.

-	Distinct and sorting are examples of stateless operations.	

-	Terminal operations produce final result of processing and not another stream.

-	They are eager in nature.

-	After the terminal operation the stream pipeline is consumed.
	
Enlist some intermediate stream operation?

-	Filtering operation is similar to WHERE clause inside SQL SELECT query. 
	
-	It is stateless operation.	
	
	Syntax:
	
	public Stream filter(Predicate pred)
	
-	Mapping operation is similar to column names (*) inside SQL SELECT query. 

-	It is stateless operation.	

	Syntax:
	
	public Stream map(Function f)	
	
-	Sorting operation is similar to ORDER BY clause inside SQL SELECT query.

-	It is a statefull operation.

	Syntax:
	
	public Stream sorted(Comparator cmp)
	
Enlist some terminal stream operation?

-	Maximum operation is similar to MAX function inside SQL SELECT query. 	
	
	Syntax:
	
	public T max(Comparator cmp)
	
-	Minimum operation is similar to MIN function inside SQL SELECT query. 	
	
	Syntax:
	
	public T min(Comparator cmp)	

-	All match, Any match and None match operations are similar to EXISTS clause inside SQL SELECT query.

	Syntax:
	
	public boolean allMatch(Predicate pred)
	
	public boolean anyMatch(Predicate pred)
	
	public boolean noneMatch(Predicate pred)
	
-	Reduce operation is similar to any AGGREGATE function inside SQL SELECT query.

	Syntax:
	
	public Stream<R> reduce(T t, BinaryOperator<R> func)

Explain what is Collectors?

-	Collectors is a helper class.

-	It provides various reduction method.

-	It allows to collect and store elements of stream inside new collection.

	Example:
	
	List lst = strm.collect(Collectors.toList());

-	We can also sum, average and group by the elements of stream.

	Example:

	double sum = strm.collect(Collectors.summingDouble(Employee::getSalary)));
	
	Example:

	double avg = strm.collect(Collectors.averagingDouble(Employee::getSalary)));

	Example:
	
	Map<Department, Double> deptWiseSal = strm.collect(Collectors.groupingBy(Employee::getDepartment, Collectors.summingDouble(Employee::getSalary)));

Explain what are parallel stream?

-	All stream operation are called sequentially.

-	But it is possible to call these operation parallel to improve speed.

	Example:
	
	lst.parallelStream();
	
-	It uses parallelism.

-	It uses fork join thread pool. 	
	
-	The operation must be stateless.

-	It must be non-interfering and order of calling must not matter.	

Explain what are primitive stream?

-	The primitive stream are used to avoid frequent boxing and unboxing.

-	There are three primitive stream and they are called as IntStream, LongStream and DoubleStream.