core java - problem solving graph datastructure

Explain the breadth first search algorithm for traversal inside a graph?

-	The breadth first search algorithm requires a start vertex, queue and an array to note visited vertices.

-	The start vertex is offered inside the queue and marked as visited insided the array.

-	Next until the queue is empty, display the vertex.

-	Find the connected vertices for the vertex present inside queue.

-	If the connected vertex is not visited offer it inside the queue.

-	When all the iterations are complete, all the vertices of the graph will be visited.

	Example:
	
	private void traverse(List<List<Integer>> adjacencyList, boolean[] visited, int currentVertex) {
		Queue<Integer> queue = new LinkedList<>();
		queue.offer(currentVertex);
		visited[currentVertex] = true;
		while (!queue.isEmpty()) {
			int vertex = queue.poll();
			System.out.println(vertex);
			List<Integer> nextVertices = adjacencyList.get(vertex);
			for (Integer nextVertex : nextVertices) {
				if (!visited[nextVertex]) {
					queue.offer(nextVertex);
					visited[nextVertex] = true;
				}
			}
		}
	}


Explain the depth first search algorithm for traversal inside a graph?

-	The breadth first search algorithm requires a start vertex and an array to note visited vertices.

-	The start vertex is marked as visited insided the array.

-	Find the connected vertices for the current vertex.

-	If the connected vertex is not visited, recursively visit it.

-	For each vertex when all the next vertices are visited recursively then display the it.

	Example:
	
	private void traverse(List<List<Integer>> adjacencyList, boolean[] visited, int currentVertex) {
		visited[currentVertex] = true;
		List<Integer> nextVertices = adjacencyList.get(currentVertex);
		for (Integer nextVertex : nextVertices) {
			if (!visited[nextVertex]) {
				traverse(adjacencyList, visited, nextVertex);
			}
		}
		System.out.println(currentVertex);
	}

Explain the rotting of oranges problem with solution?

-	The problem statement is given an matrix with 0 representing empty space, 1 representing orange and 2 representing rotten orange.

-	At every minute a orange rottens its horizontal and vertical neighbors find the time required to rotten all oranges inside the matrix.
	
-	Every rotten orange inside matrix will rotten horizontal and vertical neighbors simultaneously.

-	Therefore from a rotten orange we need to visit its horizontal and vertical neighbors first.

-	The solution to this problem is using breadth first search.

-	Along with the cell's row and column number we will offer minute value inside the queue.

	Example:
	
	for (int rowNum = 0; rowNum < grid.length; rowNum++) {
        for (int colNum = 0; colNum < grid[rowNum].length; colNum++) {
            if (grid[rowNum][colNum] == 1) {
                freshCount++;
            } else if (grid[rowNum][colNum] == 2) {
                queue.offer(Arrays.asList(rowNum, colNum, 0));
            }
            ...
        }      
    }
	...
	while (!queue.isEmpty()) {
		...
        for (int i = 0; i < 4; i++) {
                ...
            if (newRow != -1 && newRow < gridCopy.length && newCol != -1 && newCol < gridCopy[newRow].length 
				&& gridCopy[newRow][newCol] == 1) {
                    ....
            }
        }
	}

What is topological sorting?

-	A topological sorting is a technique to generate linear order of a graph.

-	It works only on directed acyclic graph.

-	A linear order is sequence of vertices, consider there exist a directed edge from vertex u to vertex v.

-	Then inside any linear order the vertex u will always appear before vertex v.

-	A graph can have multiple linear order sequence.

-	There are two algorithms to generate a linear order called as breadth first search and depth first search.

Explain the breadth first search algorithm for topological sorting?

-	The breadth first search algorithm for topological sorting is also called as Kahn's algorithm.

-	The breadth first search algorithm traverses over the adjaceny list of graph and constructs an indegree array for each vertex.

-	An indegree of a vertex is a count which is equal to the number of edges directed on it.

-	There exists atleast one vertex with indegree count equal to zero.

-	These vertices are offered inside queue.

-	Next until the queue is empty, find the connected vertices for the vertex present inside queue.

-	Decrement the indegree count for each vertex.

-	When the indegree count becomes equal to zero then offer the vertex inside queue.

	Example:
	
	public class BreadthFirstSearch {

		private void topologicalSort(List<List<Integer>> adjacencyList) {

			int[] inDegree = new int[adjacencyList.size()];
			for (int currentVertex = 0; currentVertex < inDegree.length; currentVertex++) {
				List<Integer> nextVertices = adjacencyList.get(currentVertex);
				for (Integer nextVertex : nextVertices) {
					inDegree[nextVertex]++;
				}
			}

			Queue<Integer> queue = new LinkedList<>();
			for (int currentVertex = 0; currentVertex < inDegree.length; currentVertex++) {
				if (inDegree[currentVertex] == 0) {
					queue.offer(currentVertex);
				}
			}

			while (!queue.isEmpty()) {
				int currentVertex = queue.poll();
				System.out.println(currentVertex);
				List<Integer> nextVertices = adjacencyList.get(currentVertex);
				for (Integer nextVertex : nextVertices) {
					inDegree[nextVertex]--;
					if (inDegree[nextVertex] == 0) {
						queue.offer(nextVertex);
					}
				}
			}
		}
	}

Explain the depth first search algorithm for topological sorting?

-	The depth first search algorithm traverses over the adjaceny list of graph.

-	For each vertex, it visits the its connected vertices recursively.

-	If all the connected vertices of an vertex are visited the vertex is pushed inside a stack.

-	An array is used to prevent duplicate visit to an vertex.

-	When all recursive method calls are complete the elements from stack are poped out to get then linear order.

	Example:

	public class DepthFirstSearch {
		private void dfs(int currentVertex, List<List<Integer>> adjacencyList, int[] visitedVertices,
				Stack<Integer> linearOrderStack) {
			if (visitedVertices[currentVertex] == 1) {
				return;
			}
			visitedVertices[currentVertex] = 1;
			List<Integer> nextVertices = adjacencyList.get(currentVertex);
			for (Integer nextVertex : nextVertices) {
				dfs(nextVertex, adjacencyList, visitedVertices, linearOrderStack);
			}
			linearOrderStack.push(currentVertex);
		}

		private void topologicalSort(List<List<Integer>> adjacencyList) {
			int[] visitedVertices = new int[adjacencyList.size()];
			Stack<Integer> linearOrderStack = new Stack<>();
			for (int currentVertex = 0; currentVertex < adjacencyList.size(); currentVertex++) {
				dfs(currentVertex, adjacencyList, visitedVertices, linearOrderStack);
			}
			while (!linearOrderStack.isEmpty()) {
				System.out.println(linearOrderStack.pop());
			}
		}
	}

Explain course schedule problem with solution?

-	The problem statement is given total number of courses and prerequisites, compute whether all courses can be completed or not.

-	The solution to this problem is using topological sort.

-	If a cycle exists inside graph all courses cannot be completed.

-	Hence count of elements inside linear order will be lesser than total number of courses.

Explain Dijkstra's algorithm purpose?

-	Dijkstra's algorithm is used to find the shortest path between two vertices inside a graph.

-	It works only on weighted graph with positive weights.

-	It can be implemented using queue or min heap datastructure.

-	A min heap datastructure will always arrange the minimum distance on top and hence it will be encountered in early iterations.

-	Therefore the time complexity using a min heap datastructure is better compared to queue datastructure.

-	The worst case time complexity is E log (V).

Explain Dijkstra's algorithm implementation using min heap datastructure?

-	To implement Dijkstra's algorithm using min heap datastructure we use a priority queue and a array.

-	The size of the array is equal to the number of vertices inside the graph, it is called distance array.

-	Initialize all elements of the array with maximum possible value.

-	Initialize the vertex index with distance equal to zero.

-	To find the shortest possible path between source and destination, offer the source and distance inside the priority queue.

-	Distance is calculated as sum of weights between the source vertex and the current vertex.

-	Here the source and current vertex is equal hence distance is equal to zero.

-	Next until the queue is empty, find the connected vertices for the vertex present inside queue.

-	For each connected vertex the sum of current distance and edge weight is less than existing distance inside the array, then modify the existing distance sum of current distance and edge weight.

-	Then offer the vertex and distance inside queue.

-	When all the iterations are complete, the distance array will have the shortest distance for every vertex from the source.

	Example:
	
	public class DijkstraUsingSet {

		public void dijkstra(List<List<List<Integer>>> adjacencyList, int source) {

			int[] distance = new int[adjacencyList.size()];
			for (int i = 0; i < distance.length; i++) {
				distance[i] = Integer.MAX_VALUE;
			}
			distance[source] = 0;
			PriorityQueue<Pair<Integer, Integer>> queue = new PriorityQueue<>(
					(pair1, pair2) -> pair1.getValue() - pair2.getValue());
			queue.offer(new Pair<>(source, 0));
			while (!queue.isEmpty()) {
				Pair<Integer, Integer> vertexDistPair = queue.poll();
				int vertex = vertexDistPair.getKey();
				int dist = vertexDistPair.getValue();
				List<List<Integer>> nextVertices = adjacencyList.get(vertex);
				for (List<Integer> nextVertex : nextVertices) {
					if (dist + nextVertex.get(1) < distance[nextVertex.get(0)]) {
						distance[nextVertex.get(0)] = dist + nextVertex.get(1);
						queue.offer(new Pair<>(nextVertex.get(0), dist + nextVertex.get(1)));
					}
				}
			}
			for (int i = 0; i < distance.length; i++) {
				System.out.println(distance[i]);
			}
		}
	}

Explain cheapest flights within k stop problem with with solution?

-	The problem statement is given total number of flights, cost, source, destination and maximum hops allowed.

-	Compute the cheapest cost required to reach destination from source with hops lesser than equal to maximum hops allowed.

-	The solution to this problem is using Dijkstra's algorithm.

-	Only the vertices between source and destination are considered as hops.

-	But the vertex, distance and hop can be offered inside queue only when the hop count is lesser than or equal to maximum hops allowed.

-	Therefore queue must always arrange the minimum hops on top instead of minimum distance.

-	However when using priority queue is not required as the vertex, distance and hop will be offered to queue in ascending order of hop.

	Example:
	
	...
	Queue<List<Integer>> queue = new LinkedList<>();
    queue.offer(Arrays.asList(0, source, 0));
	...
	while (!queue.isEmpty()) {
        ...
        for (Pair<Integer, Integer> nextVertexDistancePair : nextVerticesDistancesPair) {
            if (distances[nextVertexDistancePair.getKey()] > distance + nextVertexDistancePair.getValue()
                && hop <= maxHopAllowed) {
                    ...
                    queue.offer(Arrays.asList(hop + 1, nextVertexDistancePair.getKey(), distances[nextVertexDistancePair.getKey()]));
                }
            }
        }
	}