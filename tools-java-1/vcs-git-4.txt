version control system tool - 4

Explain remote repository on github?

-	The remote repository on github can be public or private.

-	Public repository files can be viewed by everyone but only owner can edit and commit.

-	But private repository files can be viewed by owner and only owner can edit and commit.

-	For public repository github provide 2 GB disk space maximum.

-	Also maximum allowed file size is 100 MB.

How to work with remote repository?

-	To configure remote repository to local repository we need to use following command.

	syntax:
	
	#git remote add [alias] [remote_repo_url]
	
	example:
	
	#git remote add origin https://github.com/shubhdes/my-project.git
	
-	For alias any name can be used but it is convention to use name origin.

-	To check remote repository configured or not we need to use following command.

	example:
	
	#git remote	-v

-	This command will list all remote repository configured with to local repository.

-	To send files from local repository to remote repository we need to use following command.

	syntax:
	
	#git push [alias] [branch_name]
	
	example:
	
	#git push origin master

-	Before performing push operation the local repository must be up to date as remote repository.

-	Otherwise there will be conflict, we need to perform pull operation before performing push operation.
	
-	We can configure multiple remote repositories to single local repository using different alias names.	

Explain what is cloning in git?

-	We can use cloning in git to copy complete project from remote repository to working directory.

-	To clone project from remote repository we need to use following command.

	syntax:
	
	#git clone [remote_repo_url]
	
	example:
	
	#git clone https://github.com/shubhdes/my-project.git

-	We can also define the working directory using following command.

	syntax:
	
	#git clone [remote_repo_url] [working_dir]
	
	example:
	
	#git clone https://github.com/shubhdes/my-project.git my-project-demo

-	This command will also create local repository for the working directory.	

Explain what is fetch and pull in git?

-	The git fetch command is used to check whether any updates are available in remote repository or not.

-	It will download metadata information from remote repository to find  updates.	

	syntax:

	#git fetch [alias]

	example:
	
	#git fetch origin

-	To bring updates from remote repository to local repository we need to use git pull command.

-	Git pull is combination of fetching changes and merging with local repository.

	syntax:

	#git pull [alias] [branch_name]

	example:
	
	#git pull origin master
	
What is tagging?

-	We can define fixed references to a commit to indicate significant event or milestone like version.

-	Tag is a static or permanant label to a commit.

-	A single commit can have one or more tags.

-	Within the repository tag name should be unique.

-	There are two types of tags, they are light weight tags and annotated tags.

-	To add tag to latest commit we need to used the following command.

	syntax:
	
	#git tag [tag_name]
	
	example:
	
	#git tag V-1.0.0
	
-	To list available tags we need to use following commands.

	example:
	
	#git tag -l	

	example:
	
	#git tag --list	
	
-	All lightweight tags will be stored as text file inside .git/refs/tags folder which contains the latest commit id.

-	To delete a tag we need to use following command.

	syntax:
	
	#git tag -d [tag_name]
	
	syntax:
	
	#git tag --delete [tag_name]
	
	example:
	
	#git tag -d V-1.0.0
	
	example:
	
	#git tag --delete V-1.0.0
	
Explain the annotated tag?

-	Light weight tag is just label for commit and it won't maintain any extra information.

-	Annotated tag are exactly same as light weight tag except that it provide additional information like tagger name, date, message and others.

-	Git store annotated tag as an object.

-	To create annotated tag to latest commit we need to use the following command.

	syntax:
	
	#git tag -a [tag_name] -m [tag_message]
	
	example:
	
	#git tag -a V-1.0.0 -m "release V-1.0.0"
	
-	To view annotated tage object we need to use following command.

	syntax:
	
	#git tag -v [tag_name]
	
	example:
	
	#git tag -v V-1.0.0
	
-	Like lightweight tags annotated tags will also be stored as text file inside .git/refs/tags folder.

-	But this file will not contain the latest commit id instead it will store the hash code of tag object.

-	Additional information provided by annotated tag is stored in binary form inside text file under folder .git/objects/{first two character}/{remaining characters}.

How to tag previous commit?

-	We can tag for previous commit also using following commands.

	syntax:
	
	#git tag -a [tag_name] [commit_id] -m [message]
	
	example:
	
	#git tag -a V-1.0.0-beta c19fd1b -m "release V-1.0.0 beta version"
	
How to update an existing tag?

-	We can update an existing tag using two ways.

-	First way is to delete an existing tag and add new tag.

	example:

	#git tag --delete V-1.0.1

	#git tag -a V-1.0.2

-	Another way is to move tag from one commit to another commit is using option -f or --force.

	syntax:
	
	#git tag -a [tag_name] -f [commit_id] -m [message]
	
	example:
	
	#git tag -a V-1.0.2 -f d19ee1b -m "release V-1.0.2"
	
How to push tag to remote repository?

-	The git push command sends files and commit information to remote repository.

-	It does not send the tag information.

-	We need to use following command to send single tag to remote repository.

	syntax:
	
	#git push origin [tag_name]
	
	example:
	
	#git push origin V-1.0.0
	
-	We need to use following command to send all tags to remote repository.
	
	example:
	
	#git push origin master --tags
	
How to delete tag from remote repository?

-	To delete tag from remote repository we need to use following command.

	syntax:
	
	#git push origin :[tag_name]
	
	example:
	
	#git push origin :V-1.0.0

-	Deleting tag from remote repository will not delete tag from local repository.