core java -	apache avro

What is apache avro?

-	Apache avro is a language independent serialization technique.

-	It uses schema stored in json format inside file with extension avsc.

-	This schema allows us to define attribute with primtive and complex data types.

-	It is possible to generate source code using this schema.

Explain schema in apache avro?

-	The schema in apache avro is defined in json format.

-	It is defined inside file with extension avsc.

-	It is possible to generate source code using this schema.

-	This schema must contain four attributes called as type, namespace, name and fields.

-	The type field determine whether the schema will result into record or enum or array or map or union or fixed.

-	The default value of type field is record.

-	Namespace attribute determine the fully qualified packaged name.

-	Name attribute determine the class name.

-	Field attribute determine class level variables.

-	It is an array of object each having two attributes called name and type.

-	The name attribute determine variable name and type attribute determine variable type.

	Example:
	
	{
		"type" : "record",
		"namespace" : "com.employee",
		"name" : "Employee",
		"fields" : [
			{ "name" : "Name", "type" : "string" },
			{ "name" : "age", "type" : "int" }
		]
	}
	
How to implement apache avro using maven?

-	To implement apache avro schema based serialization and deserialization we need to add following dependency inside pom.xml file.

	Example:
	
	<dependency>
		<groupId>org.apache.avro</groupId>
		<artifactId>avro</artifactId>
		<version>1.11.0</version>
	</dependency>

-	We need to use following plugin inside pom.xml file.

	<plugin>
		<groupId>org.apache.avro</groupId>
		<artifactId>avro-maven-plugin</artifactId>
		<version>1.11.0</version>
		<executions>
			<execution>
				<phase>generate-sources</phase>
				<goals>
					<goal>schema</goal>
				</goals>
				<configuration>
					<sourceDirectory>${project.basedir}/src/main/avro/</sourceDirectory>
					<outputDirectory>${project.basedir}/src/main/java/</outputDirectory>
				</configuration>
			</execution>
		</executions>
	</plugin>

-	This plugin is responsible to generate class from schema and hence it must be called before the compile phase.

-	For serialization using avro we need to use an implementation of DatumWriter interface.

-	It will convert java object into an inmemory serialized content.

	Example:
	
	final DatumWriter<Person> datumWriter = new SpecificDatumWriter<>(Person.class);
	
-	The serialized content must be written to file using DataFileWriter class.

	Example:
	
	final DataFileWriter<Person> dataFileWriter = new DataFileWriter<>(datumWriter);
	dataFileWriter.create(person.getSchema(), new File("person.avro"));
	try {
		dataFileWriter.append(person);
	} finally {
		dataFileWriter.close();
	}

-	For deserialization using avro we need to use an implementation of DatumReader interface.

-	It will convert serialized file content into a java object.

	Example:
	
	final DatumReader<Person> personReader = new SpecificDatumReader<>(Person.class);
	
-	The serialized content must be read from file using DataFileReader class.

	Example:
	
	final DataFileReader<Person> dataFileReader = new DataFileReader<>(file, personReader);
	try {
		Person person = null;
		while (dataFileReader.hasNext()) {
			person = dataFileReader.next(new Person());
			break;
		}
		return person;
	} finally {
		dataFileReader.close();
	}	