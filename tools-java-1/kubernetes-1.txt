kubernetes

What is kubernetes?

-	Kubernetes is an orchestration system.

-	Orchestration means automated management of containers.

What is a node and cluster?

-	A node is a computer.

-	It can be physical or virtual.

-	A collection of nodes is called as cluster.

What is a pod?

-	A pod wraps the container.

-	It is short-lived.

-	One pod can contain one or more container.

-	In general case one pod contain only one container.

-	But in exception case one pod can contain one microservice container and one or more helper container.

-	Pod is not accessible outside the cluster.

-	Following command allows to list all pods.

	example:
	
	#kubectl get pods

-	Following command allows to describe a pod.

	syntax:
	
	#kubectl describe pod [name]
	
	example:
	
	#kubectl describe pod mypod	

-	Following command allows to get shell into pod.

	syntax:
	
	#kubectl exec [name] [command]
	
	example:
	
	#kubectl exec mypod sh

-	Following is yaml definition of a pod.

	apiVersion: v1
	
	kind: Pod
	
	metadata:
	  name: mypod
	
	spec:
	  containers:
	  - name: mypod
	    image: richardchesterwood/k8s-fleetman-webapp-angular:release0	
	
What is a service?

-	A service is middleman between pod and outside world.

-	The role of service is to accept traffic from outside world or inside cluster.

-	Then redirect this traffic to the pod.

-	It is long lived.

-	Following command allows to list all services.

	example:
	
	#kubectl get services

-	Following command allows to describe a service.

	syntax:
	
	#kubectl describe service [name]
	
	example:
	
	#kubectl describe service myservice

-	There are three types of service and they are called as ClusterIP, NodePort and LoadBalancer.

-	Following is yaml definition of a service.

	apiVersion: v1

	kind: Service

	metadata:
	  name: myservice

	spec:
	  
	  ports:
	  - name: http
	    port: 80
	    targetPort: 80
	    nodePort: 30080

	  type: NodePort

-	The CluserIP service can accept traffic only from inside the cluster.

-	It is not accessible outside the cluster.

-	The NodePort service uses a port and ClusterIP service.

-	It exposes port on every node called as node port.

-	The outside world can directly send traffic on this port.

-	The incoming traffic on this port is redirected to ClusterIP service on its port.

-	Then ClusterIP service will redirect this traffic to the port used by pod called target port.

What are labels and selectors?

-	The labels are key and value pairs which identify a pod.

-	A pod can have multiple labels.

	example:

	metadata:
  	  name: mypod
  	  
  	  labels:
    	app: webapp

-	Following command allows to list all pods with labels.

	example:
	
	#kubectl get pods --show-labels
	
-	Following command allows to find pod with a label.

	syntax:
	
	#kubectl get pods -l [key]=[value]

	example:
	
	#kubectl get pods -l app=my

-	The selectors are matched against labels.

-	A service can have multiple selectors.

-	It identifies the pod using all selectors provided.

	example:

	spec:
	  selector:
	    app: webapp	    

What is a replicaset?

-	A replicaset is number of pods running at any given time.

-	The pod defined inside the replicaset definition are owned by it.

-	It uses selectors to identify new pod added to the cluster which it must own.

-	Following command allows to list all replicaset.

	example:
	
	#kubectl get replicaset

-	Following command allows to describe a replicaset.

	syntax:
	
	#kubectl describe replicaset [name]
	
	example:
	
	#kubectl describe replicaset myreplicaset

-	Following is yaml definition of a replicaset.

	apiVersion: apps/v1

	kind: ReplicaSet

	metadata:
	  name: myreplicaset

	spec:
	  replicas: 3

	  selector:
	    matchLabels:
	      app: webapp
	  
	  template:  
	    metadata:
	      labels:
	        app: webapp

	    spec:
	      containers:
	      - name: mypod
	        image: richardchesterwood/k8s-fleetman-webapp-angular:release0

What is a deployment?

-	It is an improved replicaset.

-	It support zero downtime rollout.

-	Following command allows to list all deployment.

	example:
	
	#kubectl get deployment

-	Following command allows to describe a deployment.

	syntax:
	
	#kubectl describe deployment [name]
	
	example:
	
	#kubectl describe deployment my

-	Following is yaml definition of a deployment.

	apiVersion: apps/v1

	kind: Deployment

	metadata:
	  name: mydep

	spec:
	  replicas: 3

	  selector:
	    matchLabels:
	      app: webapp
	  
	  template:  
	    metadata:
	      labels:
	        app: webapp

	    spec:
	      containers:
	      - name: mypod
            image: richardchesterwood/k8s-fleetman-webapp-angular:release0

How does deployment ensure zero downtime rollout and rollback?

-	When we create or update a deployment then kubernetes will create a new replicatset for it.

-	Also when we create or update a replicaset then kubernetes will create new pod for it.

-	This process is called as rollout.

-	When we update a deployment then the pod of old replicaset continue to exist until pod of new replicaset is ready.

-	This will ensure zero downtime rollout also when the rollout fail. 

-	But when the pod of new replicaset are ready then pod of old replicaset are destroyed.

-	However the old replicaset continue to exist.

-	This will allow kubernetes to rollback to old replicaset anytime.	

-	Following command allows to list the history of rollout.

	syntax:

	#kubectl rollout history deployment [name]

	example:

	#kubectl rollout history deployment mydep

-	It will remember last ten rollout.

-	It is possible to rollback a rollout.

-	Following command allows to rollback a rollout.

	syntax:

	#kubectl rollout undo deployment [name]

	example:

	#kubectl rollout undo deployment mydep

-	The above command will rollback the rollout to present - 1 rollout version.

-	It is possible to rollback the rollout to particular rollout version using --to-revision option.

	syntax:

	#kubectl rollout undo deployment [name] --to-revision=[version]

	example:

	#kubectl rollout undo deployment mydep --to-revision=2

What is namespace?

-	A namespace is way to group together different resources in kubernetes.

-	When namespace is not assigned to a resource it is added to namespace called default.

-	Also when namespace is not used in command it will operate on resource in default namespace.

-	Following command allows to list all pods inside namespace.

	syntax:
	
	#kubectl get pods -n [name]

	example:

	#kubectl get pods -n myns

What is networking in kubernetes?

-	It is recommended to have a single container inside a pod.

-	Therefore container present inside a pod need to communicate with container present inside another pod.	

-	This communication is supported by service.

-	A pod send request to service which will redirect the request to another pod.

-	But address of service is dynamically assigned to it and pod does not know it.

-	Every kubernetes cluster contains pod called as core-dns.

-	The pod is accessible using its service called as kube-dns.

-	Both the pod and service exist inside kube-system namespace.

-	The pod contain a container which is a database that contain mapping between fully qualified service name and its address.

-	A fully qualified service name contain name, namespace and cluster.

What is volume?

-	When a pod dies all its files are lost.

-	A volume maintains the files of a pod even when the pod dies.

-	A volume will mount a directory inside container to a directory on local machine.

-	Following is yaml definition of a volume.

	containers:
    ...
	  volumeMounts:
	  - name: myvol
	    mountPath: /data/db

	volumes:
    - name: myvol
      hostPath:
        path: /mnt/
        type: DirectoryOrCreate

-	In ideal situation using a host to mount a volume is not recommended.

-	It must use storage provided by cloud provider.		

What is a configmap?

-	Each pod may require one or multiple environment variables.

-	A configmap keeps these environment variables in a central location.

-	Following is yaml definition of a configmap.

	apiVersion: apps/v1

	kind: ConfigMap

	metadata:
	  name: mycm
	  namespace: myns

	data:
	  USERNAME: "root"
	  PASSWORD: "root"
	  
-	Following is yaml definition to consume an environment variable from configmap.

	containers:
    ...
	 env:
	  - name : USERNAME
	    valueFrom:
	      configMapKeyRef:
	        name: mycm
			key: USERNAME
		  
-	Following is another yaml definition to consume all environment variables configmap.

	containers:
    ...
	  envFrom:
	  - configMapRef:
	      name: mycm
		  
-	When a configmap is changed then pods are unaware about it.

-	They continue to use the earlier environment variables. 		 

Explain how to use volume and configmap together?

-	Each pod may require one or multiple configuration files.

-	A configmap keeps these configuration files in a central location.

-	A volume will mount a file inside container to a file defined inside configmap.

-	Following is yaml definition of a configmap.

	apiVersion: apps/v1

	kind: ConfigMap

	metadata:
	  name: mycm
	  namespace: myns

	data:
	  database.properties: |
	    username=root
	    password=root

-	Following is yaml definition of a volume.

	containers:
    ...
	  volumeMounts:
	  - name: myvol
	    mountPath: /data/db

	volumes:
    - name: myvol
      configMap:
        name: mycm