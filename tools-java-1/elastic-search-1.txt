elastic search

What is an elastic search?

-	Elastic search is a tool built for high speed search and scalability.

-	It exposes all its features as REST endpoints.

-	It accepts incoming request on port 9200.

-	It uses port 9300 for inter-node communication.

What is Kibana?

-	Kibana is data visualisation and management tool designed to interact with elastic search.

-	It exposes port 5601.

Enlist health related REST endpoints exposed by elastic search?

-	Below are different health related REST endpoints exposed by elastic search,

	Method				Endpoint						Body		Description
	-------------------------------------------------------------------------------			
-	GET					/_cluster/health							This endpoint is used to return the overall health status of the 
																	elastic search cluster.
			
-	GET					/_nodes										This endpoint is used to return the information about all nodes.
				
-	GET					/cat/{endpoint}?v							This endpoint is used to return the compact response of other endpoints.
																	The parameter v includes headers inside the response.

What is an index?

-	Index is an fundamental unit of storage inside elastic search.

-	It is analogous to table inside RDBMS.

-	It is a collection of documents.

-	Below are the REST endpoints exposed by elastic search to create an index,

	Method				Endpoint						Body		Description
	-------------------------------------------------------------------------------			
-	PUT					/{name}							empty		This endpoint is used to create index with supplied name.

																	Example:
																	
																	PUT /books

-	Below are the REST endpoints exposed by elastic search to query indices,

	Method				Endpoint						Body		Description
	-------------------------------------------------------------------------------			
-	GET					/_cat/indices?v								This endpoint is used to return all indices available inside elastic search.
			
-	GET					/_cat/indices/{name|regex}?v				This endpoint is used to return indices with supplied name.
														
-	Below are the REST endpoints exposed by elastic search to delete and index,

	Method				Endpoint						Body		Description
	-------------------------------------------------------------------------------			
-	DELTE				/{name}							empty		This endpoint is used to delete index with supplied name.
																	
																	Example:
																	
																	DELTE /books
What is a document?

-	A document is a fundamental unit of information inside elastic search.

-	It is analogous to row inside RDBMS.

-	Below are the REST endpoints exposed by elastic search to create a document,

	Method				Endpoint						Body		Description
	-------------------------------------------------------------------------------			
-	POST				/{name}/_doc					{document}	This endpoint is used to create document inside index with supplied name.

																	Example:

																	POST /books/_doc
																	{
																		"title": "The Great Gatsby",
																		"author": "F. Scott Fitzgerald",
																		"year": 1926,
																		"genre": "Fiction",
																		"rating": 4.7
																	}

-	Every document is embedded inside a parent document inside field called as _source.

-	Elastic search by default adds unique identifier with field called as _id to each document.

-	However we can override the default identifier by providing custom identifier using below REST endpoint,

	Method				Endpoint						Body		Description
	-------------------------------------------------------------------------------			
-	POST				/{name}/_doc/{id}				{document}	This endpoint is used to create document with supplied id inside index with supplied name.

																	Example:

																	POST /books/_doc/3
																	{
																		"title": "The Great Gatsby",
																		"author": "F. Scott Fitzgerald",
																		"year": 1926,
																		"genre": "Fiction",
																		"rating": 4.7
																	}																				

-	Below are the REST endpoints exposed by elastic search to query a document,
	
	Method				Endpoint						Body		Description
	-------------------------------------------------------------------------------
-	GET					/{name}/_search								This endpoint is used to return all documents inside index with supplied name.
			
-	GET					/{name}/_search?q={name|regex}				This endpoint is used to return all documents with any field matching supplied name 
																	or regex inside index with supplied name.

-	GET					/{name}/_doc/{id}							This endpoint is used to return document with supplied id inside index with supplied name.

-	Below are the REST endpoints exposed by elastic search to query a document,

	Method				Endpoint						Body		Description
	-------------------------------------------------------------------------------			
-	PUT|POST			/{name}/_doc/{id}				{document}	This endpoint is used to create document with supplied id if it doesn't exists or update 
																	an existing document if it exists inside index with supplied name.

																	Example:

																	PUT /books/_doc/3
																	{
																		"title": "The Great Gatsby",
																		"author": "F. Scott Fitzgerald",
																		"year": 1976,
																		"genre": "Fiction",
																		"rating": 4.7
																	}

-	POST				/{name}/_update/{id}			{delta}		This endpoint is used to update document with supplied id inside index with supplied name.
																	
																	When the id doesn't exists then the response returns exception document_missing_exception.				

																	Example:

																	POST /books/_update/3
																	{
																		"doc": {
																			"year": 1976
																		}
																	}

																	We can add an additional field "doc_as_upsert" : true to create document with supplied id
																	if it doesn't exists.

-	Below are the REST endpoints exposed by elastic search to delete a document,

	Method				Endpoint						Body		Description
	-------------------------------------------------------------------------------			
-	DELETE				/{name}/_doc/{id}				empty		This endpoint is used to delete document with supplied id if it exists inside index with supplied name.

Explain scripted update?

-	A scripted update is an update to a document based on its existing field.

-	Below are the REST endpoints exposed by elastic search to scripted update a document,

	Method				Endpoint						Body		Description
	-------------------------------------------------------------------------------			
-	POST				/{name}/_doc/{id}				{document}	This endpoint is used to update a document with supplied id inside index with supplied name.

																	Example: Regular update

																	POST /books/_update/3
																	{
																		"script": {
																			"source": "ctx._source.price = ctx._source.price + 100" 
																		}
																	}
																	
																	Example: Parameterised update
																
																	POST /books/_update/3
																	{
																		"script": {
																			"source": "ctx._source.price = params.price + 100",
																			"params": {
																				"price": 100
																			}	
																		}
																	}
																	
																	Example: Conditional update
																
																	POST /books/_update/3
																	{
																		"script": {
																			"source": """
																				if(ctx._source.year <= 1970) {
																					ctx._source.price = ctx._source.price + 100
																				} else {
																					ctx._source.price = ctx._source.price + 200
																				}
																			"""
																		}
																	}

-	Scripted update doesn't need query before update therefore it reduces number of network calls.

-	Its ideal of simple calculation and string manipulation.

-	However scripted update is a string which needs to be evaluated by elastic search therefore causing performance overhead.

