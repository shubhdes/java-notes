elastic search

What is an elastic search?

-	Elastic search is a tool built for high speed search and scalability.

-	It exposes all its features as REST endpoints.

-	It accepts incoming request on port 9200.

	Example:

	spring.elasticsearch.uris=http://localhost:9200

-	It uses port 9300 for inter-node communication.

-	Elastic search insert, update and delete operations are slow.

What is Kibana?

-	Kibana is data visualisation and management tool designed to interact with elastic search.

-	It exposes port 5601.

Enlist health related REST endpoints exposed by elastic search?

-	Below are different health related REST endpoints exposed by elastic search,

	Method				Endpoint						Body		Description
	-------------------------------------------------------------------------------			
-	GET					/_cluster/health							This endpoint is used to return the overall health status of the 
																	elastic search cluster.
			
-	GET					/_nodes										This endpoint is used to return the information about all nodes.
				
-	GET					/cat/{endpoint}?v							This endpoint is used to return the compact response of other endpoints.
																	The parameter v includes headers inside the response.

What is an index?

-	Index is an fundamental unit of storage inside elastic search.

-	It is analogous to table inside RDBMS.

-	It is a collection of documents.

-	Creating index is optional in elastic search.

-	When a document is inserted inside an index which doesn't exist then elastic search creates index first and then inserts document inside it.

-	Below are the REST endpoints exposed by elastic search to create an index,

	Method				Endpoint						Body		Description
	-------------------------------------------------------------------------------			
-	PUT					/{name}							empty		This endpoint is used to create index with supplied name.

																	Example:
																	
																	PUT /books

-	Below are the REST endpoints exposed by elastic search to query indices,

	Method				Endpoint						Body		Description
	-------------------------------------------------------------------------------			
-	GET					/_cat/indices?v								This endpoint is used to return all indices available inside elastic search.
			
-	GET					/_cat/indices/{name|regex}?v				This endpoint is used to return indices with supplied name.
														
-	Below are the REST endpoints exposed by elastic search to delete and index,

	Method				Endpoint						Body		Description
	-------------------------------------------------------------------------------			
-	DELETE				/{name}							empty		This endpoint is used to delete index with supplied name.
																	
																	Example:
																	
																	DELTE /books
What is a document?

-	A document is a fundamental unit of information inside elastic search.

-	It is analogous to row inside RDBMS.

-	Using spring data elastic search framework allows a program to communicate with elastic search using object instead of query.

	Example:														
	
	@Document(indexName="books")
	public class Book {
		
		@Id
		private Integer id;
		
		@Field(type = FieldType.Text)
		private String name;
		
		@Field(type = FieldType.Keyword)
		private String category;
	}

	Example:
	
	public interface BooksRepository extends ElasticsearchRepository<Book, Integer> {
	
	}	
	
-	Below are the REST endpoints exposed by elastic search to create a document,

	Method				Endpoint						Body		Description
	-------------------------------------------------------------------------------			
-	POST				/{name}/_doc					{document}	This endpoint is used to create document inside index with supplied name.

																	Example:

																	POST /books/_doc
																	{
																		"title": "The Great Gatsby",
																		"author": "F. Scott Fitzgerald",
																		"year": 1926,
																		"genre": "Fiction",
																		"rating": 4.7
																	}
																	
																	Example:
																	
																	book.id = null;
																	booksRepository.save(book);

-	Every document is embedded inside a parent document inside field called as _source.

-	Elastic search by default adds unique identifier with field called as _id to each document.

-	However we can override the default identifier by providing custom identifier using below REST endpoint,

	Method				Endpoint						Body		Description
	-------------------------------------------------------------------------------			
-	POST				/{name}/_doc/{id}				{document}	This endpoint is used to create document with supplied id inside index with supplied name.

																	Example:

																	POST /books/_doc/3
																	{
																		"title": "The Great Gatsby",
																		"author": "F. Scott Fitzgerald",
																		"year": 1926,
																		"genre": "Fiction",
																		"rating": 4.7
																	}

																	Example:
																	
																	book.id = 3;
																	booksRepository.save(book);																	

-	Below are the REST endpoints exposed by elastic search to query a document,
	
	Method				Endpoint						Body		Description
	-------------------------------------------------------------------------------
-	GET					/{name}/_search								This endpoint is used to return all documents inside index with supplied name.
			
-	GET					/{name}/_search?q={name|regex}				This endpoint is used to return all documents with any field matching supplied name 
																	or regex inside index with supplied name.

-	GET					/{name}/_doc/{id}							This endpoint is used to return document with supplied id inside index with supplied name.

																	Example:
																	
																	booksRepository.findById(3);
																	
-	Below are the REST endpoints exposed by elastic search to query a document,

	Method				Endpoint						Body		Description
	-------------------------------------------------------------------------------			
-	PUT|POST			/{name}/_doc/{id}				{document}	This endpoint is used to create document with supplied id if it doesn't exists or update 
																	an existing document if it exists inside index with supplied name.

																	Example:

																	PUT /books/_doc/3
																	{
																		"title": "The Great Gatsby",
																		"author": "F. Scott Fitzgerald",
																		"year": 1976,
																		"genre": "Fiction",
																		"rating": 4.7
																	}

																	Example:
																	
																	booksRepository.save(book);																	

-	POST				/{name}/_update/{id}			{delta}		This endpoint is used to update document with supplied id inside index with supplied name.
																	When the id doesn't exists then the response returns exception document_missing_exception.				

																	Example:

																	POST /books/_update/3
																	{
																		"doc": {
																			"year": 1976
																		}
																	}

																	We can add an additional field "doc_as_upsert" : true to create document with supplied id
																	if it doesn't exists.

-	Below are the REST endpoints exposed by elastic search to delete a document,

	Method				Endpoint						Body		Description
	-------------------------------------------------------------------------------			
-	DELETE				/{name}/_doc/{id}				empty		This endpoint is used to delete document with supplied id if it exists inside index with supplied name.

																	Example:
																	
																	booksRepository.deleteById(3);																	

Explain scripted update?

-	A scripted update is an update to a document based on its existing field.

-	Below are the REST endpoints exposed by elastic search to scripted update a document,

	Method				Endpoint						Body		Description
	-------------------------------------------------------------------------------			
-	POST				/{name}/_doc/{id}				{document}	This endpoint is used to update a document with supplied id inside index with supplied name.

																	Example: Regular update

																	POST /books/_update/3
																	{
																		"script": {
																			"source": "ctx._source.price = ctx._source.price + 100" 
																		}
																	}
																	
																	Example: Parameterised update
																
																	POST /books/_update/3
																	{
																		"script": {
																			"source": "ctx._source.price = params.price + 100",
																			"params": {
																				"price": 100
																			}	
																		}
																	}
																	
																	Example: Conditional update
																
																	POST /books/_update/3
																	{
																		"script": {
																			"source": """
																				if(ctx._source.year <= 1970) {
																					ctx._source.price = ctx._source.price + 100
																				} else {
																					ctx._source.price = ctx._source.price + 200
																				}
																			"""
																		}
																	}

-	Scripted update doesn't need query before update therefore it reduces number of network calls.

-	Its ideal of simple calculation and string manipulation.

-	However scripted update is a string which needs to be evaluated by elastic search therefore causing performance overhead.

Explain elastic search bulk operation?

-	Below REST endpoint allows bulk operation on an index.

	Method				Endpoint						Body		Description
	-------------------------------------------------------------------------------			
-	POST				/{name}/_bulk					{ndjson}	This endpoint is used to insert, update or delete multiple documents together.

																	Example:

																	POST /myindex/_bulk 
																	{ "create": { "_id": 1 }}
																	{ "name": "c++"}
																	{ "create": { "_id": 2 }}
                                                                    { "name": "c++"}
																	{ "create": { "_id": 3 }}
                                                                    { "name": "java"}
																	{ "update": { "_id": 1 }}
																	{ "name": "c"}
																	{ "create": { "_id": 4 }}
                                                                    { "name": "ruby"}
																	{ "create": { "_id": 5 }}																	
                                                                    { "name": "python"}
																	{ "delete": { "_id": 4 }}
																	
																	Example:
																	
																	booksRepository.saveAll(booksList);
																	
																	booksRepository.deleteAllByIds(idList);

-	Below REST endpoint allows bulk operation on multiple indices.

	Method				Endpoint						Body		Description
	-------------------------------------------------------------------------------			
-	POST				/{name}/_bulk					{ndjson}	This endpoint is used to insert, update or delete multiple documents together.

																	Example:

																	POST /myindex/_bulk 
																	{ "create": { "_id": 1, "_index": myindex1 }}
																	{ "name": "c++"}
																	{ "create": { "_id": 2, "_index": myindex2 }}
                                                                    { "name": "c++"}
																	{ "create": { "_id": 3, "_index": myindex3 }}
                                                                    { "name": "java"}
																	{ "update": { "_id": 1, "_index": myindex1 }}
																	{ "name": "c"}
																	{ "create": { "_id": 4, "_index": myindex4 }}
                                                                    { "name": "ruby"}
																	{ "create": { "_id": 5, "_index": myindex5 }}																	
                                                                    { "name": "python"}
																	{ "delete": { "_id": 4, "_index": myindex4 }}

-	The response is generated for each action and document.

-	When any action fails the remaining actions are processed.

-	Elastic search also allows bulk upload using file upload through REST endpoint.

What is data mapping?

-	Data mapping is process of defining how a document and its field are saved and indexed.

-	In elastic search data mapping is done using two ways called dynamic mapping and explicit mapping.

-	In dynamic mapping elastic search does mapping itself.

-	In explicit mapping we must provide elastic search with the mapping information.

-	Common used data types in elastic search are byte, short, int, long, float, double, text, keyword, object, nested, geo_point and others.

-	When a field is declared with text data type, elastic search does text analysis on it.

	Example: description

-	However when a field is declared with keyword data type, elastic search does not do text analysis on it.

	Example: email, phone number, order identifier

-	Numeric fields (byte, short, int, long, float, double) are saved inside balanced k dimensional tree instead on inverted index.

-	This simplifies execution of range based queries.

	Example: age, price, rating
	
-	Date fields are converted to long and saved inside balanced k dimensional tree.

-	Every field in elastic search can be initialised with null or value or list of values.

Explain explicit data mapping?

-	In explicit mapping we must provide elastic search with the mapping information.

-	Below is the REST endpoints exposed by elastic search to define and view explicit mapping,

	Method				Endpoint						Body		Description
	-------------------------------------------------------------------------------			
-	PUT					/{name}							{document}	This endpoint is used to define an index with explicit mapping.

																	Example:
																	
																	PUT /customers {
																		
																		"mappings": {
																			"properties": {
																				"name": {
																					"type": "text"
																				},
																				"age": {
																					"type": "integer"
																				},
																				"email": {
																					"type": "keyword"
																				}
																			}
																		}
																	}

-	PUT					/{name}/_mapping				{document}	This endpoint is used to modify an index with explicit mapping.

																	Example:
																	
																	PUT /customers/_mapping {
																		
																		"properties": {
																			"city": {
																				"type": "text"
																			}
																		}
																	}


-	GET					/{name}/_mapping							This endpoint is used to view explicit mapping of an index.

-	A document can be saved with an additional field even when it is not defined in explicit mapping.

-	Once a field is created with an data type we cannot change its data type.

-	To modify field data type we need to create another index with required modifications then copy documents from existing index to new index.

Explain autocomplete?

-	The autocomplete allows to provide search suggestion to users.

-	Elastic search provides autocomplete using either complete suggester or search as you type features.

-	The complete suggester provide search suggestion by searching for the input text as prefix inside the source document field.

-	It requires to declare a field with data type completion.

	Example:
	
	{
		"mappings": {
			"properties": {
				"city": {
					"type": "text"
					"fields": {
						"completion": {
							"type": "completion"
						}
					}
				}
			}
		}
	}
	
-	Below is the REST endpoints exposed by elastic search to retrieve search suggestion,

	Method				Endpoint						Body		Description
	-------------------------------------------------------------------------------			
-	POST				/{name}_search					{document}	This endpoint is used to retrieve search suggestion.

																	Example:
																	
																	POST /customers/_search
																	{
																		"suggest": {
																			"city-suggest": {
																				"prefix": "M",
																				"completion": {
																					"field": "city.completion"
																				}
																			}
																		}
																	}
																	
																	Example:
																	
																	var fieldSuggester = FieldSuggester.of(fieldSuggesterBuilder -> fieldSuggesterBuilder.prefix("M").completion(
																								.of(completionSuggesterBuilder -> completionSuggesterBuilder.field("city"))));

																	suggester = Suggester.of(suggesterBuilder -> suggesterBuilder.suggesters("city-suggest", fieldSuggester));

																	nativeQuery = NativeQuery.builder().withSuggester(suggester).build();

																	searchHits = elasticSearchOperations.search(nativeQuery, Customers.class);	

-	The search as you type provide search suggestion by searching for the input text everywhere inside the source document field and not only prefix.

-	It requires to declare a field with data type search_as_you_type.

	Example:
	
	{
		"mappings": {
			"properties": {
				"city": {
					"type": "search_as_you_type"
				}
			}
		}
	}

-	To to retrieve search suggestion we need to use bool query.