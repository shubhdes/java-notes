Java Annotation is a tag that represents the metadata i.e. some additional information which can be used by java compiler and JVM.
Alternative option for XML and java marker interfaces.
Annotations are only metadata and they do not contain any business logic.
Consumer is a piece of code which reads this information and then performs necessary logic.
@Override â€“ JVM is the consumer and it works at bytecode level. 


Some built-in annotations.

1)	@Override	=	assures that the subclass method is overriding the parent class method.
2)	@SuppressWarnings	=	used to suppress warnings issued by the compiler.
3)	@Deprecated	=	 marks that this method is deprecated so compiler prints warning.It informs user that it may be removed in the future versions

Custom Annotations

Syntax	=	
@interface MyAnnotation
{
}  

Types of annotations

1)An annotation that has no method, is called marker annotation.
Example	
@interface MyAnnotation
{
}  
Used as 
@MyAnnotation


2)An annotation that has one method, is called single-value annotation.
Example	
@interface MyAnnotation
{
	String value();		//This method like members are called elements of annotation
}  
Used as 
@MyAnnotation("JAVA") or @MyAnnotation(value = "JAVA")


3)An annotation that has more than one method, is called Multi-Value annotation.
Example	
@interface MyAnnotation
{  
	int value1();  
	String value2();  
}  
Used as 
@MyAnnotation(value1 = 10, value2 = "JAVA")


Default value for annotations

We can provide the default value also. 
Example
@interface MyAnnotation
{  
	int value() default 0;  
}  


Some special annotations that are used with other annotations
@Target =	used to specify at which type, the annotation is used.

The java.lang.annotation.ElementType enum declares many constants to specify the type of element where annotation is to be applied.

Element Types   Where the annotation can be applied
TYPE			class, interface or enumeration
FIELD			fields
METHOD			methods
CONSTRUCTOR		constructors
LOCAL_VARIABLE	local variables
ANNOTATION_TYPE	annotation type
PARAMETER		parameter

Example 

@Target(ElementType.TYPE)  
@interface MyAnnotation
{  
	int value1();  
	String value2();  
}  

@Retention annotation is used to specify to what level annotation will be available.

RetentionPolicy				Availability
RetentionPolicy.SOURCE	=	refers to the source code, discarded during compilation. It will not be available in the byte code.
RetentionPolicy.CLASS	=	refers to the .class file, available in byte code and to java compiler but ignored by JVM.
RetentionPolicy.RUNTIME	=	refers to the runtime, available to java compiler and JVM .
Example to specify the RetentionPolicy

@Retention(RetentionPolicy.RUNTIME)  

@Inherited

By default, annotations are not inherited to subclasses. The @Inherited annotation marks the annotation to be inherited to subclasses.

@Documented

The @Documented Marks the annotation for inclusion in the documentation.
By default, annotations are not included in javadoc. But if @Documented is used, it then will be processed by javadoc-like tools and the annotation type 
information will also be included in the generated document.

@Documented
public @interface Test_Documented {
   String doTestDocument();
}
Next, update your TestAnnotations class as follows:

public class TestAnnotations {
   public static void main(String arg[]) {
      new TestAnnotations().doSomeTestDocumented();
   }
   @Test_Documented(doTestDocument="Hello document")
   public void doSomeTestDocumented() {
      System.out.printf("Testing annotation 'Documented'");
   }
}
Now, if we run the javadoc command and view the generated TestAnnotations.html, annotation description is provided for the doSomeTestDocumented() method.
